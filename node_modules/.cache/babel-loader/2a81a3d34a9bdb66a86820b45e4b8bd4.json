{"ast":null,"code":"// 'use strict';\n\n/* Makes a GET request to the backend.\r\n *\r\n * \"path\" is the absolute path of the requested resource, but it does not\r\n * include the host. (e.g. path should be '/causes_api/signin' not\r\n * 'localhost:3000/causes_api/signin').\r\n * \r\n * \"mimeType\" is the expected MIME type of the backend's response. See\r\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\r\n * for more info.\r\n */\nasync function requestGET(path) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let mimeType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'text/plain';\n  const response = await fetch(path + (queryParams == null ? '' : '?' + new URLSearchParams(queryParams)), {\n    method: 'GET',\n    mode: 'same-origin',\n    cache: 'no-cache',\n    credentials: 'same-origin',\n    headers: {\n      'Accept': mimeType\n    },\n    referrerPolicy: 'no-referrer'\n  });\n  return response;\n}\n/* Makes a POST request to the backend.\r\n *\r\n * \"path\" is the absolute path of the requested resource, but it does not\r\n * include the host. (e.g. path should be '/causes_api/signin' not\r\n * 'localhost:3000/causes_api/signin').\r\n * \r\n * \"data\" is the already encoded data to be included in the POST request body.\r\n * \r\n * \"mimeType\" is the expected MIME type of the backend's response. See\r\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\r\n * for more info.\r\n */\n\n\nasync function requestPOST(path, data) {\n  let mimeType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'text/plain';\n  const response = await fetch(path, {\n    method: 'POST',\n    mode: 'same-origin',\n    cache: 'no-cache',\n    credentials: 'same-origin',\n    headers: {\n      'Accept': mimeType\n    },\n    referrerPolicy: 'no-referrer',\n    body: data\n  });\n  return response;\n}\n\nfunction formatDateTime(date) {\n  const d = new Date(date);\n  let timeString = d.toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n  timeString = timeString.charAt(0) === '0' ? timeString.substring(1) : timeString;\n  return d.toDateString() + ' at ' + timeString;\n}\n\nfunction dateAlreadyPassed(date) {\n  const d = new Date(date);\n  const now = new Date();\n  console.log(d);\n  console.log(now);\n  console.log(d < now);\n  console.log();\n  return d < now;\n}\n\nexport default {\n  requestGET,\n  requestPOST,\n  formatDateTime,\n  dateAlreadyPassed\n};","map":{"version":3,"names":["requestGET","path","queryParams","mimeType","response","fetch","URLSearchParams","method","mode","cache","credentials","headers","referrerPolicy","requestPOST","data","body","formatDateTime","date","d","Date","timeString","toLocaleTimeString","hour","minute","charAt","substring","toDateString","dateAlreadyPassed","now","console","log"],"sources":["C:/Users/Abi Lopez/Desktop/CS194W/my-app/src/util.js"],"sourcesContent":["// 'use strict';\r\n\r\n/* Makes a GET request to the backend.\r\n *\r\n * \"path\" is the absolute path of the requested resource, but it does not\r\n * include the host. (e.g. path should be '/causes_api/signin' not\r\n * 'localhost:3000/causes_api/signin').\r\n * \r\n * \"mimeType\" is the expected MIME type of the backend's response. See\r\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\r\n * for more info.\r\n */\r\nasync function requestGET(path, queryParams = null, mimeType = 'text/plain') {\r\n  const response = await fetch(\r\n    path + ((queryParams == null) ? '' : ('?' + new URLSearchParams(queryParams))),\r\n    {\r\n      method: 'GET',\r\n      mode: 'same-origin',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Accept': mimeType\r\n      },\r\n      referrerPolicy: 'no-referrer'\r\n    }\r\n  );\r\n\r\n  return response;\r\n}\r\n\r\n/* Makes a POST request to the backend.\r\n *\r\n * \"path\" is the absolute path of the requested resource, but it does not\r\n * include the host. (e.g. path should be '/causes_api/signin' not\r\n * 'localhost:3000/causes_api/signin').\r\n * \r\n * \"data\" is the already encoded data to be included in the POST request body.\r\n * \r\n * \"mimeType\" is the expected MIME type of the backend's response. See\r\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\r\n * for more info.\r\n */\r\nasync function requestPOST(path, data, mimeType = 'text/plain') {\r\n  const response = await fetch(\r\n    path,\r\n    {\r\n      method: 'POST',\r\n      mode: 'same-origin',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Accept': mimeType\r\n      },\r\n      referrerPolicy: 'no-referrer',\r\n      body: data\r\n    }\r\n  );\r\n\r\n  return response;\r\n}\r\n\r\nfunction formatDateTime(date) {\r\n  const d = new Date(date);\r\n  let timeString = d.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\r\n  timeString = (timeString.charAt(0) === '0') ? timeString.substring(1) : timeString;\r\n  return d.toDateString() + ' at ' + timeString;\r\n}\r\n\r\nfunction dateAlreadyPassed(date) {\r\n  const d = new Date(date);\r\n  const now = new Date();\r\n  console.log(d);\r\n  console.log(now);\r\n  console.log(d < now);\r\n  console.log();\r\n  return d < now;\r\n}\r\n\r\nexport default { requestGET, requestPOST, formatDateTime, dateAlreadyPassed };\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,UAAf,CAA0BC,IAA1B,EAA6E;EAAA,IAA7CC,WAA6C,uEAA/B,IAA+B;EAAA,IAAzBC,QAAyB,uEAAd,YAAc;EAC3E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1BJ,IAAI,IAAKC,WAAW,IAAI,IAAhB,GAAwB,EAAxB,GAA8B,MAAM,IAAII,eAAJ,CAAoBJ,WAApB,CAAxC,CADsB,EAE1B;IACEK,MAAM,EAAE,KADV;IAEEC,IAAI,EAAE,aAFR;IAGEC,KAAK,EAAE,UAHT;IAIEC,WAAW,EAAE,aAJf;IAKEC,OAAO,EAAE;MACP,UAAUR;IADH,CALX;IAQES,cAAc,EAAE;EARlB,CAF0B,CAA5B;EAcA,OAAOR,QAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeS,WAAf,CAA2BZ,IAA3B,EAAiCa,IAAjC,EAAgE;EAAA,IAAzBX,QAAyB,uEAAd,YAAc;EAC9D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1BJ,IAD0B,EAE1B;IACEM,MAAM,EAAE,MADV;IAEEC,IAAI,EAAE,aAFR;IAGEC,KAAK,EAAE,UAHT;IAIEC,WAAW,EAAE,aAJf;IAKEC,OAAO,EAAE;MACP,UAAUR;IADH,CALX;IAQES,cAAc,EAAE,aARlB;IASEG,IAAI,EAAED;EATR,CAF0B,CAA5B;EAeA,OAAOV,QAAP;AACD;;AAED,SAASY,cAAT,CAAwBC,IAAxB,EAA8B;EAC5B,MAAMC,CAAC,GAAG,IAAIC,IAAJ,CAASF,IAAT,CAAV;EACA,IAAIG,UAAU,GAAGF,CAAC,CAACG,kBAAF,CAAqB,EAArB,EAAyB;IAACC,IAAI,EAAE,SAAP;IAAkBC,MAAM,EAAC;EAAzB,CAAzB,CAAjB;EACAH,UAAU,GAAIA,UAAU,CAACI,MAAX,CAAkB,CAAlB,MAAyB,GAA1B,GAAiCJ,UAAU,CAACK,SAAX,CAAqB,CAArB,CAAjC,GAA2DL,UAAxE;EACA,OAAOF,CAAC,CAACQ,YAAF,KAAmB,MAAnB,GAA4BN,UAAnC;AACD;;AAED,SAASO,iBAAT,CAA2BV,IAA3B,EAAiC;EAC/B,MAAMC,CAAC,GAAG,IAAIC,IAAJ,CAASF,IAAT,CAAV;EACA,MAAMW,GAAG,GAAG,IAAIT,IAAJ,EAAZ;EACAU,OAAO,CAACC,GAAR,CAAYZ,CAAZ;EACAW,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACAC,OAAO,CAACC,GAAR,CAAYZ,CAAC,GAAGU,GAAhB;EACAC,OAAO,CAACC,GAAR;EACA,OAAOZ,CAAC,GAAGU,GAAX;AACD;;AAED,eAAe;EAAE5B,UAAF;EAAca,WAAd;EAA2BG,cAA3B;EAA2CW;AAA3C,CAAf"},"metadata":{},"sourceType":"module"}